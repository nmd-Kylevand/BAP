/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
// @ts-nocheck
import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations, OrbitControls } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useRouter } from 'next/navigation'

type GLTFResult = GLTF & {
  nodes: {
    earth_color_10K: THREE.Mesh
    earth_color_10K001: THREE.Mesh
    Curve: THREE.Mesh
    Curve006: THREE.Mesh
    Curve001: THREE.Mesh
    Curve002: THREE.Mesh
    Curve003: THREE.Mesh
    Curve004: THREE.Mesh
    Curve005: THREE.Mesh
  }
  materials: {
    earth_color_10K: THREE.MeshStandardMaterial
    clouds: THREE.MeshStandardMaterial
    ['SVGMat.003']: THREE.MeshStandardMaterial
    ['SVGMat.008']: THREE.MeshStandardMaterial
  }
}

interface ComponentProps {
  props?: JSX.IntrinsicElements['group'],
  animation: number
}

type ActionName = 'CurveAction.005' | 'Curve.006Action.002' | 'Curve.001Action.001' | 'Curve.002Action' | 'Curve.003Action' | 'Curve.004Action' | 'Curve.005Action.001'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export function Model({...props }: ComponentProps) {
  THREE.Cache.enabled = true

  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/earthFinal_withAnimations2.glb') as GLTFResult
  const { actions } = useAnimations<GLTFActions>(animations, group)


  useEffect(() => {

    switch (props.animation) {
      case 0:
        actions['CurveAction.005'].play()
        Object.keys(actions).map((key,index) => {
          if(actions[key] !== actions['CurveAction.005'] )
          {
            actions[key].stop()
          }
          
         
      })
         break;
      case 1:
      case 2:
        actions['Curve.006Action.002'].play()
        Object.keys(actions).map((key,index) => {
          if(actions[key] !== actions['Curve.006Action.002'] )
          {
            actions[key].stop()
          }
      })
        break;
      case 3:
        actions['Curve.001Action.001'].play()
        Object.keys(actions).map((key,index) => {
          if(actions[key] !== actions['Curve.001Action.001'] )
          {
            actions[key].stop()
          }
      })
        break;
      case 4: 
        actions['Curve.002Action'].play()
        Object.keys(actions).map((key,index) => {
          if(actions[key] !== actions['Curve.002Action'] )
          {
            actions[key].stop()
          }
      })
        break;
      case 5:
        
        actions['Curve.003Action'].play()
          Object.keys(actions).map((key,index) => {
            if(actions[key] !== actions['Curve.003Action'] )
            {
              actions[key].stop()
            }
        })
        break;
      case 6:

        actions['Curve.004Action'].play()
        Object.keys(actions).map((key,index) => {
          if(actions[key] !== actions['Curve.004Action'] )
          {
            actions[key].stop()
          }
        })

        break;
      case 7:

        actions['Curve.005Action.001'].play()
        Object.keys(actions).map((key,index) => {
          if(actions[key] !== actions['Curve.005Action.001'] )
          {
            actions[key].stop()
          }
        })
        break;
      default:
        break;
    }
},[actions, props.animation])
  return (
    <group ref={group} {...props} dispose={null} rotation={[2.25, 11.05, 8.1]}>
      <group name="Scene">
        <ambientLight/>
        <directionalLight intensity={1} decay={2} color="#fffcf4" position={[4.08, 5.9, 5.66]} rotation={[-0.52, 0.96, 1.11]} />

        <mesh name="earth_color_10K" geometry={nodes.earth_color_10K.geometry} material={materials.earth_color_10K} position={[-0.01, 0.09, 0]} rotation={[0.55, 1.03, -0.61]} />
        <mesh name="earth_color_10K001" geometry={nodes.earth_color_10K001.geometry} material={materials.clouds} position={[0.04, 0.12, -0.02]} rotation={[0.55, 1.03, -0.61]} scale={.999}/>
        <mesh name="Curve" className="cursor-pointer" geometry={nodes.Curve.geometry} material={materials['SVGMat.003']} position={[1.77, 1.41, 0.62]} scale={0} />
        <mesh name="Curve006" className="cursor-pointer"  geometry={nodes.Curve006.geometry} material={materials['SVGMat.008']} position={[1.68, 1.35, 0.94]} scale={0} />
        <mesh name="Curve001" className="cursor-pointer"  geometry={nodes.Curve001.geometry} material={materials['SVGMat.008']} position={[1.93, 0.93, 1.06]} scale={0} />
        <mesh name="Curve002" className="cursor-pointer"  geometry={nodes.Curve002.geometry} material={materials['SVGMat.008']} position={[1.96, 1.13, 0.66]} scale={0} />
        <mesh name="Curve003" className="cursor-pointer"  geometry={nodes.Curve003.geometry} material={materials['SVGMat.008']} position={[1.82, 0.97, 1.12]} scale={0} />
        <mesh name="Curve004" className="cursor-pointer"  geometry={nodes.Curve004.geometry} material={materials['SVGMat.008']} position={[1.86, 0.93, 1.07]} scale={0} />
        <mesh name="Curve005" className="cursor-pointer"  geometry={nodes.Curve005.geometry} material={materials['SVGMat.008']} position={[1.79, 1.52, 0.29]} scale={0} />
      </group>
        <OrbitControls enableZoom={false}/>
    </group>
  )
}

useGLTF.preload('/earthFinal_withAnimations2.glb')
